{"version":3,"sources":["main.js"],"names":["console","log","states","state","document","querySelector","suggestions","addEventListener","e","innerHTML","inputVal","currentTarget","value","toLowerCase","length","forEach","item","includes","createButton","string","button","createElement","preventDefault","appendChild"],"mappings":";;AAAAA,QAAQC,GAAR,CAAY,OAAZ;;AAEA,IAAMC,SAAS,CACd,SADc,EAEd,QAFc,EAGd,gBAHc,EAId,SAJc,EAKd,UALc,EAMd,YANc,EAOd,UAPc,EAQd,aARc,EASd,UATc,EAUd,sBAVc,EAWd,gCAXc,EAYd,SAZc,EAad,SAbc,EAcd,MAdc,EAed,QAfc,EAgBd,OAhBc,EAiBd,UAjBc,EAkBd,SAlBc,EAmBd,MAnBc,EAoBd,QApBc,EAqBd,UArBc,EAsBd,WAtBc,EAuBd,OAvBc,EAwBd,kBAxBc,EAyBd,UAzBc,EA0Bd,eA1Bc,EA2Bd,UA3Bc,EA4Bd,WA5Bc,EA6Bd,aA7Bc,EA8Bd,UA9Bc,EA+Bd,SA/Bc,EAgCd,UAhCc,EAiCd,QAjCc,EAkCd,eAlCc,EAmCd,YAnCc,EAoCd,YApCc,EAqCd,UArCc,EAsCd,gBAtCc,EAuCd,cAvCc,EAwCd,0BAxCc,EAyCd,MAzCc,EA0Cd,UA1Cc,EA2Cd,QA3Cc,EA4Cd,OA5Cc,EA6Cd,cA7Cc,EA8Cd,aA9Cc,EA+Cd,cA/Cc,EAgDd,gBAhDc,EAiDd,cAjDc,EAkDd,WAlDc,EAmDd,OAnDc,EAoDd,MApDc,EAqDd,SArDc,EAsDd,gBAtDc,EAuDd,UAvDc,EAwDd,YAxDc,EAyDd,eAzDc,EA0Dd,WA1Dc,EA2Dd,SA3Dc,CAAf;;AA+DA,IAAIC,QAAQC,SAASC,aAAT,oBAAZ;AACA,IAAIC,cAAcF,SAASC,aAAT,gBAAlB;;AAGAF,MAAMI,gBAAN,CAAuB,OAAvB,EAAgC,UAASC,CAAT,EAAW;AAC1CF,aAAYG,SAAZ,GAAwB,EAAxB;AACA,KAAMC,WAAWF,EAAEG,aAAF,CAAgBC,KAAhB,CAAsBC,WAAtB,EAAjB;AACA;AACA,KAAIH,SAASI,MAAT,IAAmB,CAAvB,EAA0B;AACzB;AACA;AACD;AACAZ,QAAOa,OAAP,CAAgB,UAACC,IAAD,EAAU;AACzB,SAAOA,KAAKH,WAAL,GAAmBI,QAAnB,CAA4BP,QAA5B,IAAwCQ,aAAaF,IAAb,CAAxC,GAA6D,IAApE;AACC;AACD,EAHD;AAIA,CAZD;;AAcA;AACA,IAAME,eAAe,SAAfA,YAAe,CAAUC,MAAV,EAAkB;AACtC,KAAIC,SAAShB,SAASiB,aAAT,CAAuB,QAAvB,CAAb;AACAD,QAAOX,SAAP,GAAmBU,MAAnB;AACAC,QAAOb,gBAAP,CAAyB,OAAzB,EAAkC,UAASC,CAAT,EAAW;AAC5CA,IAAEc,cAAF;AACAnB,QAAMS,KAAN,GAAcO,MAAd;AACA,EAHD;AAIA;AACAb,aAAYiB,WAAZ,CAAwBH,MAAxB;AACA,CATD;;AAaA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA;AACA;;;AAKA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAOA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA","file":"main.js","sourcesContent":["console.log(\"hello\")\n\nconst states = [\n\t\"Alabama\",\n\t\"Alaska\",\n\t\"American Samoa\",\n\t\"Arizona\",\n\t\"Arkansas\",\n\t\"California\",\n\t\"Colorado\",\n\t\"Connecticut\",\n\t\"Delaware\",\n\t\"District Of Columbia\",\n\t\"Federated States Of Micronesia\",\n\t\"Florida\",\n\t\"Georgia\",\n\t\"Guam\",\n\t\"Hawaii\",\n\t\"Idaho\",\n\t\"Illinois\",\n\t\"Indiana\",\n\t\"Iowa\",\n\t\"Kansas\",\n\t\"Kentucky\",\n\t\"Louisiana\",\n\t\"Maine\",\n\t\"Marshall Islands\",\n\t\"Maryland\",\n\t\"Massachusetts\",\n\t\"Michigan\",\n\t\"Minnesota\",\n\t\"Mississippi\",\n\t\"Missouri\",\n\t\"Montana\",\n\t\"Nebraska\",\n\t\"Nevada\",\n\t\"New Hampshire\",\n\t\"New Jersey\",\n\t\"New Mexico\",\n\t\"New York\",\n\t\"North Carolina\",\n\t\"North Dakota\",\n\t\"Northern Mariana Islands\",\n\t\"Ohio\",\n\t\"Oklahoma\",\n\t\"Oregon\",\n\t\"Palau\",\n\t\"Pennsylvania\",\n\t\"Puerto Rico\",\n\t\"Rhode Island\",\n\t\"South Carolina\",\n\t\"South Dakota\",\n\t\"Tennessee\",\n\t\"Texas\",\n\t\"Utah\",\n\t\"Vermont\",\n\t\"Virgin Islands\",\n\t\"Virginia\",\n\t\"Washington\",\n\t\"West Virginia\",\n\t\"Wisconsin\",\n\t\"Wyoming\"\n]\n\n\nlet state = document.querySelector(`[name=\"state\"]`)\nlet suggestions = document.querySelector(`.suggestions`) \n\n\nstate.addEventListener(\"keyup\", function(e){\n\tsuggestions.innerHTML = '';\n\tconst inputVal = e.currentTarget.value.toLowerCase()\n\t//if there isn't anything in the field, stop\n\tif (inputVal.length <= 0) {\n\t\treturn\n\t}\n\t//for each element in the array if it includes the value, create our button, if not do nothing\n\tstates.forEach ((item) => {\n\t\treturn item.toLowerCase().includes(inputVal) ? createButton(item) : null\n\t\t\t//ternary statement\n\t})\n})\t\n\n// the function for making the strings into buttons\nconst createButton = function (string) {\n\tlet button = document.createElement('button')\n\tbutton.innerHTML = string\n\tbutton.addEventListener (\"click\", function(e){\n\t\te.preventDefault()\n\t\tstate.value = string\n\t})\n\t//this adds the buttons to the dom\n\tsuggestions.appendChild(button)\n}\n\n\n\n// check item.name and then turn the states into objects and give them names and flag img. Call it to put the flag in the click event\n\n\n\n\n\n//What do I need to do?\n//run a function for when letters begin to be typed out in the input text field. \n//read what letters are being typed and store them in a var\n//if the letters typed are in an array item then populate the array item(s) below as a suggestion. \n//then if you click on the suggestion it changes the text field to contain that and the other options disappear\n//save that as a string and cross check it with the array items\n//alphabetize the options that come out?\n\n\n//loop through the array for each item in that array \n\n//this is listening for the type event and running the program\n// window.addEventListener(\"load\", function() {\n// \t$state.addEventListener(\"keyup\", function(event) {\n// \t\tstates.forEach(function (element) {\n// \t\t\tif (element.includes($state.value)){\n// \t\t\t\t$suggestions.innerHTML +=  element; \n// \t\t\t\t}\n// \t\t\t\tconsole.log(element);\n// \t\t});\n// \t\tconsole.log(\"test\")\t\n// \t});\t\n// });\n\n\n//this is making the strings match up by lower casing them\n// var match = function (str) {\n// \tstr = str.toLowerCase();\n// \tfor (var i = 0; i < states.length; i++) {\n// \t\tif (states[i].toLowerCase().startsWith(str)) {\n// \t\t\t$state.append ('<div>' + states[i] + '</div>');\n// \t\t}\n// \t}\n// }\n\n// let applicableStates = states.filter(function(state){\n\t\n// })\t\n\n//this is looping through the array and making each item a string\n\n\t\n\n\n// states.filter(function(state){\n// \tif (searchCharacters.value === states.includes) {\n// \t\treturn state\n// \t} else {}\n// })\n\n// //one to make the list\n// //one to show/hide the list\n// //one to search through the list\n// //one to make the selection\n\n// //this is doing the autocomplete \n// var autocomplete = function (event){\n//     var input = event.target;\n\n//     if (input.value.length < 0 ) { \n//         return;\n//     } else { \n// \t\t$state.innerHTML = \"\";\n\n// \t\tresponse.forEach(function(item) {\n// \t\t    var option = document.createElement('option');\n// \t\t    option.value = item;\n\n// \t\t    huge_list.appendChild(option);\n// \t\t});\n// \t}\t\n// }\n\n\n// //this is listening for the type event and running the program\n// window.addEventListener(\"load\", function() {\n// \t$state.addEventListener(\"keyup\", function() {\n// \t\tcheckArray();\n// \t});\n// });\n\n\n\n// //this is making the strings match up by lower casing them\n// var match = function (str) {\n// \tstr = str.toLowerCase();\n// \tfor (var i = 0; i < states.length; i++) {\n// \t\tif (states[i].toLowerCase().startsWith(str)) {\n// \t\t\t$state.append ('<div>' + states[i] + '</div>');\n// \t\t}\n// \t}\n// }\n\n// var removeDiv = function ()\n//another function\n// var filterStates = function () {\n// \tif (states.forEach === states.includes) {\n// \t\treturn $state\n// \t} else {\n// \t\tconsole.log(states.forEach)\n// \t}\n// }\n\n\n\n// then input filed.value = \"returned state\"\n// and the other ones go away\n// maybe with display none\n\n\n\n\n//Assignment\n//Type in the state\n//EXTRA make the state flag as the option or when you click them give them the flag. \n//\n\n//keypress (key up and down)\n\n//if the name has the letter included in it array.includes\n//entered text is the value\n//inner html\n// they need to be able to be clicked on and if they are clicked on then it autopopulates in the text field\n\n// if a is clicked on then change \n//make the others go away\n\n\n// searchCharacters = document.querySelectorAll()\n\n// states.filter(function(state){\n// \tif (searchCharacters.value === states.includes) {\n// \t\treturn state\n// \t} else {}\n// })\n\n// then input filed.value = \"returned state\"\n// and the other ones go away\n// maybe with display none\n\n\n\n\n\n\n// # Advanced Programming - Field Suggestions\n\n// ## 1. Assignment\n// Make it so that when the user starts typing into the field `<input type=\"text\" id=\"state\" name=\"state\">`, the site should\n// \"suggest\" what state they might have started typing. \n\n// Suggested state names should be shown in the div `<div class=\"suggestions\">`, and\n// when the user clicks one, the suggestions should dissappear and the field should be filled with the state name that was clicked.\n\n// Style it nicely.\n\n// ## 2. Extra credit\n// Make this into your own plugin. If I were doing this, I'd make it so that a developer could have the form there in the html, and just call some JS to apply an array of suggestions to a field. \n\n// Something like this:\n\n//     // make the #suggestions field suggest states in the array\n//     suggestify('#suggestions', [\"Alabama\", \"Alaska\", ...]);\n\n"]}